/* tslint:disable */
/* eslint-disable */
/**
 * MINT Data Catalog
 * API Documentation for MINT Data Catalog
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: danf@usc.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject10,
    InlineObject10FromJSON,
    InlineObject10ToJSON,
    InlineObject7,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
} from '../models';

export interface GetVariableInfoRequest {
    body: InlineObject10;
}

export interface RegisterVariablesRequest {
    body: InlineObject7;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Detailed information about the variable
     */
    async getVariableInfoRaw(requestParameters: GetVariableInfoRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getVariableInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/variables/get_variable_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject10ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * Detailed information about the variable
     */
    async getVariableInfo(requestParameters: GetVariableInfoRequest): Promise<InlineResponse2006> {
        const response = await this.getVariableInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create variable record(s)
     */
    async registerVariablesRaw(requestParameters: RegisterVariablesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling registerVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/register_variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject7ToJSON(requestParameters.body),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create variable record(s)
     */
    async registerVariables(requestParameters: RegisterVariablesRequest): Promise<void> {
        await this.registerVariablesRaw(requestParameters);
    }

}
