/* tslint:disable */
/* eslint-disable */
/**
 * MINT Data Catalog
 * API Documentation for MINT Data Catalog
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: danf@usc.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
} from '../models';

export interface DatasetResourcesRequest {
    body: InlineObject3;
}

export interface DatasetStandardVariablesRequest {
    body: InlineObject1;
}

export interface DatasetVariablesRequest {
    body: InlineObject2;
}

export interface DatasetsSearchRequest {
    body: InlineObject5;
}

export interface FindDatasetsRequest {
    body: InlineObject6;
}

export interface GetDatasetInfoRequest {
    body: InlineObject4;
}

export interface RegisterDatasetsRequest {
    body: InlineObject;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     * List all resources for this dataset
     */
    async datasetResourcesRaw(requestParameters: DatasetResourcesRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetResources.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/dataset_resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * List all resources for this dataset
     */
    async datasetResources(requestParameters: DatasetResourcesRequest): Promise<InlineResponse2002> {
        const response = await this.datasetResourcesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all standard_variables for this dataset
     */
    async datasetStandardVariablesRaw(requestParameters: DatasetStandardVariablesRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetStandardVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/dataset_standard_variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * List all standard_variables for this dataset
     */
    async datasetStandardVariables(requestParameters: DatasetStandardVariablesRequest): Promise<InlineResponse200> {
        const response = await this.datasetStandardVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all variables for this dataset
     */
    async datasetVariablesRaw(requestParameters: DatasetVariablesRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/dataset_variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * List all variables for this dataset
     */
    async datasetVariables(requestParameters: DatasetVariablesRequest): Promise<InlineResponse2001> {
        const response = await this.datasetVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Full-text search of datasets
     */
    async datasetsSearchRaw(requestParameters: DatasetsSearchRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetsSearch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Full-text search of datasets
     */
    async datasetsSearch(requestParameters: DatasetsSearchRequest): Promise<InlineResponse2004> {
        const response = await this.datasetsSearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Search datasets by name, id, or standard variables
     */
    async findDatasetsRaw(requestParameters: FindDatasetsRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling findDatasets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/find_datasets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Search datasets by name, id, or standard variables
     */
    async findDatasets(requestParameters: FindDatasetsRequest): Promise<InlineResponse2004> {
        const response = await this.findDatasetsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Detailed information about the dataset
     */
    async getDatasetInfoRaw(requestParameters: GetDatasetInfoRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getDatasetInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/get_dataset_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Detailed information about the dataset
     */
    async getDatasetInfo(requestParameters: GetDatasetInfoRequest): Promise<InlineResponse2003> {
        const response = await this.getDatasetInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create dataset record(s)
     */
    async registerDatasetsRaw(requestParameters: RegisterDatasetsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling registerDatasets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets/register_datasets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create dataset record(s)
     */
    async registerDatasets(requestParameters: RegisterDatasetsRequest): Promise<void> {
        await this.registerDatasetsRaw(requestParameters);
    }

}
